#
# Marlin Firmware
# PlatformIO Configuration File
#
# For detailed documentation with EXAMPLES:
#
# https://docs.platformio.org/en/latest/projectconf/index.html
#

# Automatic targets - enable auto-uploading
#targets = upload

[platformio]
src_dir      = Marlin
boards_dir   = buildroot/share/PlatformIO/boards
default_envs = STM32F103RC_btt_USB
include_dir  = Marlin
extra_configs =
    ini/avr.ini
    ini/due.ini
    ini/esp32.ini
    ini/features.ini
    ini/lpc176x.ini
    ini/native.ini
    ini/samd51.ini
    ini/stm32-common.ini
    ini/stm32f0.ini
    ini/stm32f1-maple.ini
    ini/stm32f1.ini
    ini/stm32f4.ini
    ini/stm32f7.ini
    ini/stm32h7.ini
    ini/stm32g0.ini
    ini/teensy.ini

#
# The 'common' section applies to most Marlin builds.
#
# By default platformio build will abort after 5 errors.
# Remove '-fmax-errors=5' from build_flags below to see all.
#
[common]
build_flags        = -g3 -D__MARLIN_FIRMWARE__ -DNDEBUG
                     -fmax-errors=5
extra_scripts      =
  pre:buildroot/share/PlatformIO/scripts/common-dependencies.py
  pre:buildroot/share/PlatformIO/scripts/common-cxxflags.py
  pre:buildroot/share/PlatformIO/scripts/preflight-checks.py
  post:buildroot/share/PlatformIO/scripts/common-dependencies-post.py
lib_deps           =
default_src_filter = +<src/*> -<src/config> -<src/HAL> +<src/HAL/shared>
  -<src/lcd/HD44780> -<src/lcd/TFTGLCD> -<src/lcd/dogm> -<src/lcd/tft> -<src/lcd/tft_io>
  -<src/HAL/STM32/tft> -<src/HAL/STM32F1/tft>
  -<src/lcd/e3v2/common> -<src/lcd/e3v2/creality> -<src/lcd/e3v2/enhanced> -<src/lcd/e3v2/jyersui> -<src/lcd/e3v2/marlinui>
  -<src/lcd/menu>
  -<src/lcd/menu/game/game.cpp> -<src/lcd/menu/game/brickout.cpp> -<src/lcd/menu/game/invaders.cpp>
  -<src/lcd/menu/game/maze.cpp> -<src/lcd/menu/game/snake.cpp>
  -<src/lcd/menu/menu_backlash.cpp>
  -<src/lcd/menu/menu_bed_corners.cpp>
  -<src/lcd/menu/menu_bed_leveling.cpp>
  -<src/lcd/menu/menu_cancelobject.cpp>
  -<src/lcd/menu/menu_delta_calibrate.cpp>
  -<src/lcd/menu/menu_filament.cpp>
  -<src/lcd/menu/menu_info.cpp>
  -<src/lcd/menu/menu_job_recovery.cpp>
  -<src/lcd/menu/menu_language.cpp>
  -<src/lcd/menu/menu_led.cpp>
  -<src/lcd/menu/menu_media.cpp>
  -<src/lcd/menu/menu_mmu2.cpp>
  -<src/lcd/menu/menu_password.cpp>
  -<src/lcd/menu/menu_power_monitor.cpp>
  -<src/lcd/menu/menu_spindle_laser.cpp>
  -<src/lcd/menu/menu_temperature.cpp>
  -<src/lcd/menu/menu_tmc.cpp>
  -<src/lcd/menu/menu_touch_screen.cpp>
  -<src/lcd/menu/menu_tramming.cpp>
  -<src/lcd/menu/menu_ubl.cpp>
  -<src/lcd/menu/menu_x_twist.cpp>
  -<src/lcd/extui/anycubic_chiron>
  -<src/lcd/extui/anycubic_i3mega>
  -<src/lcd/extui/dgus> -<src/lcd/extui/dgus/fysetc> -<src/lcd/extui/dgus/hiprecy> -<src/lcd/extui/dgus/mks> -<src/lcd/extui/dgus/origin>
  -<src/lcd/extui/dgus_reloaded>
  -<src/lcd/extui/example>
  -<src/lcd/extui/ftdi_eve_touch_ui>
  -<src/lcd/extui/malyan>
  -<src/lcd/extui/mks_ui>
  -<src/lcd/extui/nextion>
  -<src/lcd/lcdprint.cpp>
  -<src/lcd/touch/touch_buttons.cpp>
  -<src/sd/usb_flashdrive/lib-uhs2> -<src/sd/usb_flashdrive/lib-uhs3>
  -<src/sd/usb_flashdrive/Sd2Card_FlashDrive.cpp>
  -<src/sd/cardreader.cpp> -<src/sd/Sd2Card.cpp> -<src/sd/SdBaseFile.cpp> -<src/sd/SdFatUtil.cpp> -<src/sd/SdFile.cpp> -<src/sd/SdVolume.cpp>
  -<src/HAL/shared/backtrace>
  -<src/HAL/shared/cpu_exception>
  -<src/HAL/shared/eeprom_if_i2c.cpp>
  -<src/HAL/shared/eeprom_if_spi.cpp>
  -<src/feature/adc> -<src/gcode/feature/adc>
  -<src/feature/babystep.cpp>
  -<src/feature/backlash.cpp>
  -<src/feature/baricuda.cpp> -<src/gcode/feature/baricuda>
  -<src/feature/bedlevel/abl> -<src/gcode/bedlevel/abl>
  -<src/feature/bedlevel/abl/x_twist.cpp>
  -<src/feature/bedlevel/mbl> -<src/gcode/bedlevel/mbl>
  -<src/feature/bedlevel/ubl> -<src/gcode/bedlevel/ubl>
  -<src/feature/bedlevel/hilbert_curve.cpp>
  -<src/feature/binary_stream.cpp> -<src/libs/heatshrink>
  -<src/feature/bltouch.cpp>
  -<src/feature/cancel_object.cpp> -<src/gcode/feature/cancel>
  -<src/feature/caselight.cpp> -<src/gcode/feature/caselight>
  -<src/feature/closedloop.cpp>
  -<src/feature/controllerfan.cpp> -<src/gcode/feature/controllerfan>
  -<src/feature/cooler.cpp>  -<src/gcode/temp/M143_M193.cpp>
  -<src/feature/dac> -<src/feature/digipot>
  -<src/feature/direct_stepping.cpp> -<src/gcode/motion/G6.cpp>
  -<src/feature/e_parser.cpp>
  -<src/feature/easythreed_ui.cpp>
  -<src/feature/encoder_i2c.cpp>
  -<src/feature/ethernet.cpp> -<src/gcode/feature/network/M552-M554.cpp>
  -<src/feature/fancheck.cpp>
  -<src/feature/fanmux.cpp>
  -<src/feature/filwidth.cpp> -<src/gcode/feature/filwidth>
  -<src/feature/fwretract.cpp> -<src/gcode/feature/fwretract>
  -<src/feature/host_actions.cpp>
  -<src/feature/hotend_idle.cpp>
  -<src/feature/joystick.cpp>
  -<src/feature/leds/blinkm.cpp>
  -<src/feature/leds/leds.cpp>
  -<src/feature/leds/neopixel.cpp>
  -<src/feature/leds/pca9533.cpp>
  -<src/feature/leds/pca9632.cpp>
  -<src/feature/leds/printer_event_leds.cpp>
  -<src/feature/leds/tempstat.cpp>
  -<src/feature/max7219.cpp>
  -<src/feature/meatpack.cpp>
  -<src/feature/mixing.cpp>
  -<src/feature/mmu/mmu.cpp>
  -<src/feature/mmu/mmu2.cpp> -<src/gcode/feature/prusa_MMU2>
  -<src/feature/password> -<src/gcode/feature/password>
  -<src/feature/pause.cpp>
  -<src/feature/power.cpp>
  -<src/feature/power_monitor.cpp> -<src/gcode/feature/power_monitor>
  -<src/feature/powerloss.cpp> -<src/gcode/feature/powerloss>
  -<src/feature/probe_temp_comp.cpp>
  -<src/feature/repeat.cpp>
  -<src/feature/runout.cpp> -<src/gcode/feature/runout>
  -<src/feature/snmm.cpp>
  -<src/feature/solenoid.cpp> -<src/gcode/control/M380_M381.cpp>
  -<src/feature/spindle_laser.cpp> -<src/gcode/control/M3-M5.cpp>
  -<src/feature/stepper_driver_safety.cpp>
  -<src/feature/tmc_util.cpp> -<src/module/stepper/trinamic.cpp>
  -<src/feature/tramming.cpp>
  -<src/feature/twibus.cpp>
  -<src/feature/z_stepper_align.cpp>
  -<src/gcode/bedlevel/G26.cpp>
  -<src/gcode/bedlevel/G35.cpp>
  -<src/gcode/bedlevel/G42.cpp>
  -<src/gcode/bedlevel/M420.cpp> -<src/feature/bedlevel/bedlevel.cpp>
  -<src/gcode/calibrate/G33.cpp>
  -<src/gcode/calibrate/G34.cpp>
  -<src/gcode/calibrate/G34_M422.cpp>
  -<src/gcode/calibrate/G76_M871.cpp>
  -<src/gcode/calibrate/G425.cpp>
  -<src/gcode/calibrate/M12.cpp>
  -<src/gcode/calibrate/M48.cpp>
  -<src/gcode/calibrate/M100.cpp>
  -<src/gcode/calibrate/M425.cpp>
  -<src/gcode/calibrate/M665.cpp>
  -<src/gcode/calibrate/M666.cpp>
  -<src/gcode/calibrate/M852.cpp>
  -<src/gcode/control/M10-M11.cpp>
  -<src/gcode/control/M42.cpp> -<src/gcode/control/M226.cpp>
  -<src/gcode/config/M43.cpp>
  -<src/gcode/config/M217.cpp>
  -<src/gcode/config/M218.cpp>
  -<src/gcode/config/M221.cpp>
  -<src/gcode/config/M301.cpp>
  -<src/gcode/config/M302.cpp>
  -<src/gcode/config/M304.cpp>
  -<src/gcode/config/M305.cpp>
  -<src/gcode/config/M540.cpp>
  -<src/gcode/config/M575.cpp>
  -<src/gcode/config/M672.cpp>
  -<src/gcode/control/M7-M9.cpp>
  -<src/gcode/control/M211.cpp>
  -<src/gcode/control/M350_M351.cpp>
  -<src/gcode/control/M605.cpp>
  -<src/gcode/feature/advance>
  -<src/gcode/feature/camera>
  -<src/gcode/feature/i2c>
  -<src/gcode/feature/L6470>
  -<src/gcode/feature/leds/M150.cpp>
  -<src/gcode/feature/leds/M7219.cpp>
  -<src/gcode/feature/macro>
  -<src/gcode/feature/mixing/M163-M165.cpp>
  -<src/gcode/feature/mixing/M166.cpp>
  -<src/gcode/feature/pause/G27.cpp>
  -<src/gcode/feature/pause/G60.cpp>
  -<src/gcode/feature/pause/G61.cpp>
  -<src/gcode/feature/pause/M125.cpp>
  -<src/gcode/feature/pause/M600.cpp>
  -<src/gcode/feature/pause/M603.cpp>
  -<src/gcode/feature/pause/M701_M702.cpp>
  -<src/gcode/feature/trinamic/M122.cpp>
  -<src/gcode/feature/trinamic/M569.cpp>
  -<src/gcode/feature/trinamic/M906.cpp>
  -<src/gcode/feature/trinamic/M911-M914.cpp>
  -<src/gcode/geometry/G17-G19.cpp>
  -<src/gcode/geometry/G53-G59.cpp>
  -<src/gcode/geometry/M206_M428.cpp>
  -<src/gcode/host/M16.cpp>
  -<src/gcode/host/M113.cpp>
  -<src/gcode/host/M154.cpp>
  -<src/gcode/host/M360.cpp>
  -<src/gcode/host/M876.cpp>
  -<src/gcode/lcd/M0_M1.cpp>
  -<src/gcode/lcd/M117.cpp>
  -<src/gcode/lcd/M250.cpp> -<src/gcode/lcd/M256.cpp>
  -<src/gcode/lcd/M300.cpp>
  -<src/gcode/lcd/M414.cpp>
  -<src/gcode/lcd/M73.cpp>
  -<src/gcode/lcd/M995.cpp>
  -<src/gcode/motion/G2_G3.cpp>
  -<src/gcode/motion/G5.cpp>
  -<src/gcode/motion/G80.cpp>
  -<src/gcode/motion/M290.cpp>
  -<src/gcode/probe/G30.cpp>
  -<src/gcode/probe/G31_G32.cpp>
  -<src/gcode/probe/G38.cpp>
  -<src/gcode/probe/M401_M402.cpp>
  -<src/gcode/probe/M851.cpp>
  -<src/gcode/probe/M951.cpp>
  -<src/gcode/scara>
  -<src/gcode/sd>
  -<src/gcode/sd/M32.cpp>
  -<src/gcode/sd/M808.cpp>
  -<src/gcode/temp/M104_M109.cpp>
  -<src/gcode/temp/M123.cpp>
  -<src/gcode/temp/M155.cpp>
  -<src/gcode/temp/M192.cpp>
  -<src/gcode/units/G20_G21.cpp>
  -<src/gcode/units/M82_M83.cpp>
  -<src/gcode/units/M149.cpp>
  -<src/libs/BL24CXX.cpp> -<src/libs/W25Qxx.cpp>
  -<src/libs/L64XX> -<src/module/stepper/L64xx.cpp> -<src/HAL/shared/HAL_spi_L6470.cpp>
  -<src/libs/MAX31865.cpp>
  -<src/libs/hex_print.cpp>
  -<src/libs/least_squares_fit.cpp>
  -<src/libs/nozzle.cpp> -<src/gcode/feature/clean>
  -<src/module/delta.cpp>
  -<src/module/planner_bezier.cpp>
  -<src/module/polargraph.cpp>
  -<src/module/printcounter.cpp>
  -<src/module/probe.cpp>
  -<src/module/scara.cpp>
  -<src/module/servo.cpp> -<src/gcode/control/M280.cpp> -<src/gcode/config/M281.cpp> -<src/gcode/control/M282.cpp>
  -<src/module/stepper/TMC26X.cpp>

#
# Default values apply to all 'env:' prefixed environments
#
[env]
framework     = arduino
extra_scripts = ${common.extra_scripts}
build_flags   = ${common.build_flags}
lib_deps      = ${common.lib_deps}
monitor_speed = 250000
monitor_flags =
  --quiet
  --echo
  --eol
    LF
  --filter
    colorize
  --filter
    time

#
# Just print the dependency tree
#
 [env:include_tree]
 platform    = stm32f1
 board       = genericSTM32F103RC
 build_flags = -c -H -std=gnu++11 -Wall -Os -D__MARLIN_FIRMWARE__
 src_filter  = +<src/MarlinCore.cpp>

; [env:STM32F103RC_btt]
;  platform    = stm32f1
;  board       = genericSTM32F103RC

# Marlin Firmware
# PlatformIO Configuration File
#

#
# Marlin Firmware
# PlatformIO Configuration File
#

; ####################################
; #
; # HAL/STM32 Common Environments
; #
; ####################################

; [common_stm32]
; platform         = ststm32@~12.1
; board_build.core = stm32
; build_flags      = ${common.build_flags}
;                    -std=gnu++14 -DHAL_STM32
;                    -DUSBCON -DUSBD_USE_CDC
;                    -DTIM_IRQ_PRIO=13
; build_unflags    = -std=gnu++11
; src_filter       = ${common.default_src_filter} +<src/HAL/STM32> +<src/HAL/shared/backtrace>
; extra_scripts    = ${common.extra_scripts}
;                    pre:buildroot/share/PlatformIO/scripts/stm32_serialbuffer.py

; #
; # STM32 board based on a variant.
; #
; [stm32_variant]
; extends       = common_stm32
; extra_scripts = ${common_stm32.extra_scripts}
;                 pre:buildroot/share/PlatformIO/scripts/generic_create_variant.py
;                     buildroot/share/PlatformIO/scripts/offset_and_rename.py

; #
; # USB Flash Drive mix-ins for STM32
; #
; [stm_flash_drive]
; platform_packages = framework-arduinoststm32@https://github.com/rhapsodyv/Arduino_Core_STM32/archive/usb-host-msc-cdc-msc-3.zip
; build_flags       = ${common_stm32.build_flags}
;                     -DHAL_PCD_MODULE_ENABLED -DHAL_HCD_MODULE_ENABLED
;                     -DUSBHOST -DUSBH_IRQ_PRIO=3 -DUSBH_IRQ_SUBPRIO=4


; #################################
; #
; # STM32F1 Architecture with unified STM32 HAL
; #
; # Naming Example: STM32F103RCT6
; #
; #   F : Foundation (sometimes High Performance F2/F4)
; #   1 : Cortex M3 core (0:M0, 1-2:M3, 3-4:M4, 7:M7)
; #  03 : Line/Features
; #   R : 64 or 66 pins  (T:36, C:48, V:100, Z:144, I:176)
; #   C : 256KB Flash-memory  (B: 128KB, D:384KB, E:512KB, G:1024KB)
; #   T : LQFP package
; #   6 : -40...85°C   (7: ...105°C)
; #
; #################################

; [common_STM32F103RC_variant]
; extends              = stm32_variant
; board                = genericSTM32F103RC
; board_build.variant  = MARLIN_F103Rx
; build_flags          = ${stm32_variant.build_flags} -DDEBUG_LEVEL=0
; monitor_speed        = 115200

; #
; # STM32F103RE
; #
; [env:STM32F103RE]
; platform      = ${common_stm32.platform}
; extends       = common_stm32
; board         = genericSTM32F103RE
; monitor_speed = 115200

; #
; # STM32F103VE
; #
; [env:STM32F103VE]
; platform      = ${common_stm32.platform}
; extends       = common_stm32
; board         = genericSTM32F103VE
; monitor_speed = 115200

; #
; # STM32F103ZE
; #
; [env:STM32F103ZE]
; platform      = ${common_stm32.platform}
; extends       = common_stm32
; board         = genericSTM32F103ZE
; monitor_speed = 115200

; #
; # BigTree SKR Mini V1.1 / SKR Mini E3 & MZ (STM32F103RCT6 ARM Cortex-M3)
; #
; #   STM32F103RC_btt ............. RCT6 with 256K
; #   STM32F103RC_btt_USB ......... RCT6 with 256K (USB mass storage)
; #
; [env:STM32F103RC_btt]
; platform                    = ${common_stm32.platform}
; extends                     = common_STM32F103RC_variant
; build_flags                 = ${common_STM32F103RC_variant.build_flags}
;                               -DTIMER_SERVO=TIM5
; board_build.offset          = 0x7000
; board_upload.offset_address = 0x08007000
; ; upload_protocol             = dfu

; [env:STM32F103RC_btt_USB]
; platform          = ${common_stm32.platform}
; extends           = env:STM32F103RC_btt
; platform_packages = ${stm_flash_drive.platform_packages}
; build_flags       = ${env:STM32F103RC_btt.build_flags}
;                     -DUSE_USB_FS
;                     -DUSBD_IRQ_PRIO=5
;                     -DUSBD_IRQ_SUBPRIO=6
;                     -DUSBD_USE_CDC_MSC
; build_unflags     = ${common_stm32.build_unflags} -DUSBD_USE_CDC

; #
; # MKS Robin (STM32F103ZET6)
; # Uses HAL STM32 to support Marlin UI for TFT screen with optional touch panel
; #
; [env:mks_robin]
; platform             = ${common_stm32.platform}
; extends              = stm32_variant
; board                = genericSTM32F103ZE
; board_build.variant  = MARLIN_F103Zx
; board_build.encrypt  = Robin.bin
; board_build.offset   = 0x7000
; build_flags          = ${stm32_variant.build_flags}
;                        -DENABLE_HWSERIAL3 -DTIMER_SERIAL=TIM5
; build_unflags        = ${stm32_variant.build_unflags}
;                        -DUSBCON -DUSBD_USE_CDC

; #
; # MKS Robin E3/E3D (STM32F103RCT6) with TMC2209
; #
; [env:mks_robin_e3]
; platform                    = ${common_stm32.platform}
; extends                     = common_STM32F103RC_variant
; board_build.encrypt         = Robin_e3.bin
; board_build.offset          = 0x5000
; board_upload.offset_address = 0x08005000
; build_flags                 = ${common_STM32F103RC_variant.build_flags}
;                               -DTIMER_SERVO=TIM5 -DDEFAULT_SPI=3
; build_unflags               = ${common_STM32F103RC_variant.build_unflags}
;                               -DUSBCON -DUSBD_USE_CDC
; monitor_speed               = 115200
; debug_tool                  = stlink

; #
; # Creality (STM32F103RET6)
; #
; [env:STM32F103RET6_creality]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103RE
; board_build.variant         = MARLIN_F103Rx
; board_build.offset          = 0x7000
; board_upload.offset_address = 0x08007000
; build_flags                 = ${stm32_variant.build_flags}
;                               -DMCU_STM32F103RE -DHAL_SD_MODULE_ENABLED
;                               -DSS_TIMER=4 -DTIMER_SERVO=TIM5
;                               -DENABLE_HWSERIAL3 -DTRANSFER_CLOCK_DIV=8
; build_unflags               = ${stm32_variant.build_unflags}
;                               -DUSBCON -DUSBD_USE_CDC
; extra_scripts               = ${stm32_variant.extra_scripts}
;                               pre:buildroot/share/PlatformIO/scripts/random-bin.py
; monitor_speed               = 115200
; debug_tool                  = jlink
; upload_protocol             = jlink

; #
; # BigTree SKR Mini E3 V2.0 & DIP / SKR CR6 (STM32F103RET6 ARM Cortex-M3)
; #
; #   STM32F103RE_btt ............. RET6
; #   STM32F103RE_btt_USB ......... RET6 (USB mass storage)
; #
; [env:STM32F103RE_btt]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103RE
; board_build.variant         = MARLIN_F103Rx
; board_build.offset          = 0x7000
; board_upload.offset_address = 0x08007000
; build_flags                 = ${stm32_variant.build_flags}
;                               -DMCU_STM32F103RE -DHAL_SD_MODULE_ENABLED
;                               -DSS_TIMER=4 -DTIMER_SERVO=TIM5
;                               -DENABLE_HWSERIAL3 -DTRANSFER_CLOCK_DIV=8
; monitor_speed               = 115200
; debug_tool                  = jlink
; upload_protocol             = dfu

; [env:STM32F103RE_btt_USB]
; platform          = ${common_stm32.platform}
; extends           = env:STM32F103RE_btt
; platform_packages = ${stm_flash_drive.platform_packages}
; build_flags       = ${env:STM32F103RE_btt.build_flags}
;                     -DUSE_USB_FS -DUSBD_IRQ_PRIO=5
;                     -DUSBD_IRQ_SUBPRIO=6 -DUSBD_USE_CDC_MSC
; build_unflags     = ${stm32_variant.build_unflags} -DUSBD_USE_CDC

; #
; # FLSUN QQS Pro (STM32F103VET6)
; # board Hispeedv1
; #
; [env:flsun_hispeedv1]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103VE
; board_build.variant         = MARLIN_F103Vx
; board_build.encrypt         = Robin_mini.bin
; board_build.offset          = 0x7000
; board_upload.offset_address = 0x08007000
; build_flags                 = ${stm32_variant.build_flags}
;                               -DMCU_STM32F103VE -DSS_TIMER=4 -DENABLE_HWSERIAL3
;                               -DTIMER_TONE=TIM3 -DTIMER_SERVO=TIM2
; build_unflags               = ${stm32_variant.build_unflags}
;                               -DUSBCON -DUSBD_USE_CDC

; #
; # MKS Robin Nano V1.2 and V2
; #
; [env:mks_robin_nano35]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103VE
; board_build.variant         = MARLIN_F103Vx
; board_build.encrypt         = Robin_nano35.bin
; board_build.offset          = 0x7000
; board_upload.offset_address = 0x08007000
; build_flags                 = ${stm32_variant.build_flags}
;                               -DMCU_STM32F103VE -DSS_TIMER=4 -DENABLE_HWSERIAL3
;                               -DTIMER_TONE=TIM3 -DTIMER_SERVO=TIM2
; build_unflags               = ${stm32_variant.build_unflags}
;                               -DUSBCON -DUSBD_USE_CDC
; debug_tool                  = jlink
; upload_protocol             = jlink

; #
; # Mingda MPX_ARM_MINI
; #
; [env:mingda_mpx_arm_mini]
; platform             = ${common_stm32.platform}
; extends              = stm32_variant
; board                = genericSTM32F103ZE
; board_build.variant  = MARLIN_F103Zx
; board_build.offset   = 0x10000
; build_flags          = ${stm32_variant.build_flags}
;                        -DENABLE_HWSERIAL3 -DTIMER_SERIAL=TIM5
; build_unflags        = ${stm32_variant.build_unflags}
;                        -DUSBCON -DUSBD_USE_CDC

; #
; # Malyan M200 (STM32F103CB)
; #
; [env:STM32F103CB_malyan]
; platform    = ${common_stm32.platform}
; extends     = common_stm32
; board       = malyanm200_f103cb
; build_flags = ${common_stm32.build_flags}
;               -DHAL_PCD_MODULE_ENABLED -DDISABLE_GENERIC_SERIALUSB
;               -DHAL_UART_MODULE_ENABLED
; src_filter  = ${common.default_src_filter} +<src/HAL/STM32>

; #
; # FLYmaker FLY Mini (STM32F103RCT6)
; #
; [env:FLY_MINI]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103RC
; board_build.variant         = MARLIN_F103Rx
; board_build.offset          = 0x5000
; board_upload.offset_address = 0x08005000
; build_flags                 = ${stm32_variant.build_flags} -DSS_TIMER=4

; #
; # MKS Robin Mini (STM32F103VET6)
; #
; [env:mks_robin_mini]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103VE
; board_build.variant         = MARLIN_F103Vx
; board_build.encrypt         = Robin_mini.bin
; board_build.offset          = 0x7000
; board_upload.offset_address = 0x08007000
; build_flags                 = ${stm32_variant.build_flags}
;                               -DMCU_STM32F103VE -DTIMER_TONE=TIM3 -DTIMER_SERVO=TIM2

; #
; # MKS Robin Lite/Lite2 (STM32F103RCT6)
; #
; [env:mks_robin_lite]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103RC
; board_build.variant         = MARLIN_F103Rx
; board_build.encrypt         = mksLite.bin
; board_build.offset          = 0x5000
; board_upload.offset_address = 0x08005000

; #
; # MKS ROBIN LITE3 (STM32F103RCT6)
; #
; [env:mks_robin_lite3]
; platform                    = ${common_stm32.platform}
; extends                     = env:mks_robin_lite
; board_build.encrypt         = mksLite3.bin

; #
; # MKS Robin Pro (STM32F103ZET6)
; #
; [env:mks_robin_pro]
; platform            = ${common_stm32.platform}
; extends             = env:mks_robin
; board_build.encrypt = Robin_pro.bin

; #
; # MKS Robin E3p (STM32F103VET6)
; #  - LVGL UI
; #
; [env:mks_robin_e3p]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103VE
; board_build.variant         = MARLIN_F103Vx
; board_build.encrypt         = Robin_e3p.bin
; board_build.offset          = 0x7000
; board_upload.offset_address = 0x08007000
; build_flags                 = ${stm32_variant.build_flags}
;                               -DMCU_STM32F103VE -DSS_TIMER=4
;                               -DTIMER_TONE=TIM3 -DTIMER_SERVO=TIM2
; debug_tool                  = jlink
; upload_protocol             = jlink

; #
; # JGAurora A5S A1 (STM32F103ZET6)
; #
; [env:jgaurora_a5s_a1]
; platform                    = ${common_stm32.platform}
; extends                     = stm32_variant
; board                       = genericSTM32F103ZE
; board_build.variant         = MARLIN_F103Zx
; board_build.offset          = 0xA000
; board_build.rename          = firmware_for_sd_upload.bin
; board_upload.offset_address = 0x0800A000
; build_flags                 = ${stm32_variant.build_flags}
;                               -DSTM32F1xx -DSTM32_XL_DENSITY
; extra_scripts               = ${stm32_variant.extra_scripts}
;                               buildroot/share/PlatformIO/scripts/jgaurora_a5s_a1_with_bootloader.py

; #
; # FYSETC STM32F103RC
; #
; [env:STM32F103RC_fysetc]
; platform        = ${common_stm32.platform}
; extends         = common_STM32F103RC_variant
; extra_scripts   = ${common_STM32F103RC_variant.extra_scripts}
;                   buildroot/share/PlatformIO/scripts/STM32F103RC_fysetc.py
; lib_ldf_mode    = chain
; debug_tool      = stlink
; upload_protocol = serial

; #
; # Longer 3D board in Alfawise U20 (STM32F103VET6)
; #
; [env:STM32F103VE_longer]
; platform                    = ${common_stm32.platform}
; lib_deps                    = ${common.lib_deps}
;   https://github.com/tpruvot/STM32_Servo_OpenDrain/archive/2.0.zip
; extends                     = stm32_variant
; board                       = genericSTM32F103VE
; board_build.variant         = MARLIN_F103VE_LONGER
; board_build.rename          = project.bin
; board_build.offset          = 0x10000
; board_upload.offset_address = 0x08010000
; build_flags                 = ${stm32_variant.build_flags} -DMCU_STM32F103VE -DU20 -DTS_V12
; build_unflags               = ${stm32_variant.build_unflags} -DUSBCON -DUSBD_USE_CDC -DHAL_PCD_MODULE_ENABLED
; extra_scripts               = ${stm32_variant.extra_scripts}
; monitor_speed               = 250000
; debug_tool                  = stlink

; #
; # TRIGORILLA PRO (STM32F103ZET6)
; #
; [env:trigorilla_pro]
; platform             = ${stm32_variant.platform}
; extends              = stm32_variant
; board                = genericSTM32F103ZE
; board_build.variant  = MARLIN_F103Zx
; build_flags          = ${stm32_variant.build_flags}
;                        -DENABLE_HWSERIAL3 -DTIMER_SERIAL=TIM5
; build_unflags        = ${stm32_variant.build_unflags}
;                        -DUSBCON -DUSBD_USE_CDC

; #
; # Chitu boards like Tronxy X5s (STM32F103ZET6)
; #
; [env:chitu_f103]
; platform             = ${common_stm32.platform}
; extends              = stm32_variant
; board                = genericSTM32F103ZE
; board_build.variant  = MARLIN_F103Zx
; board_build.offset   = 0x8800
; build_flags          = ${stm32_variant.build_flags}
;                        -DSTM32F1xx
; build_unflags        = ${stm32_variant.build_unflags}
; extra_scripts        = ${stm32_variant.extra_scripts}
;                        buildroot/share/PlatformIO/scripts/chitu_crypt.py

; #
; # Some Chitu V5 boards have a problem with GPIO init.
; # Use this target if G28 or G29 are always failing.
; #
; [env:chitu_v5_gpio_init]
; platform      = ${common_stm32.platform}
; extends       = env:chitu_f103
; build_flags   = ${env:chitu_f103.build_flags} -DCHITU_V5_Z_MIN_BUGFIX

; #
; # Zonestar ZM3E2 V1.0 / ZM3E4 V1.0 / ZM3E4 V2.0
; #
; #  STM32F103RC_ZM3E2_USB ........... RCT6 with 256K
; #  STM32F103VC_ZM3E4_USB ........... VCT6 with 256K
; #  STM32F103VE_ZM3E4V2_USB ......... VET6 with 512K
; #
; [ZONESTAR_ZM3E]
; platform                  = ${common_stm32.platform}
; extends                   = stm32_variant
; platform_packages         = ${stm_flash_drive.platform_packages}
; board_upload.offset_address = 0x08005000
; board_build.offset        = 0x5000
; board_upload.maximum_size = 237568
; extra_scripts             = ${stm32_variant.extra_scripts}
; build_flags               = ${common_stm32.build_flags}
;   -DSS_TIMER=4 -DTIMER_SERVO=TIM5 -DUSE_USB_FS -DUSBD_IRQ_PRIO=5 -DUSBD_IRQ_SUBPRIO=6 -DUSBD_USE_CDC_MSC
; build_unflags             = ${stm32_variant.build_unflags} -DUSBD_USE_CDC

; [env:STM32F103RC_ZM3E2_USB]
; platform             = ${ZONESTAR_ZM3E.platform}
; extends              = ZONESTAR_ZM3E
; board                = genericSTM32F103RC
; board_build.variant  = MARLIN_F103Rx

; [env:STM32F103VC_ZM3E4_USB]
; platform             = ${ZONESTAR_ZM3E.platform}
; extends              = ZONESTAR_ZM3E
; board                = genericSTM32F103VC
; board_build.variant  = MARLIN_F103Vx
; build_flags          = ${ZONESTAR_ZM3E.build_flags} -DTIMER_TONE=TIM1

; [env:STM32F103VE_ZM3E4V2_USB]
; platform             = ${ZONESTAR_ZM3E.platform}
; extends              = ZONESTAR_ZM3E
; board                = genericSTM32F103VE
; board_build.variant  = MARLIN_F103Vx
; build_flags          = ${ZONESTAR_ZM3E.build_flags} -DTIMER_TONE=TIM1
; board_upload.maximum_size = 499712
